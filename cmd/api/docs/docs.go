// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth": {
            "post": {
                "description": "Генерирует access и refresh токены",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.authRequestOrResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токены",
                        "schema": {
                            "$ref": "#/definitions/main.tokensResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request(GUID required)"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/currentUser": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает GUID текущего аутентифицированного пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Получение текущего пользователя",
                "responses": {
                    "200": {
                        "description": "GUID пользователя",
                        "schema": {
                            "$ref": "#/definitions/main.authRequestOrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access"
                    }
                }
            }
        },
        "/api/deauthorize": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Отзывает все токены пользователя",
                "tags": [
                    "auth"
                ],
                "summary": "Деавторизация",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    }
                }
            }
        },
        "/api/refresh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Обновляет пару access и refresh токенов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновление токенов",
                "parameters": [
                    {
                        "description": "Refresh токен",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.refreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Новые токены",
                        "schema": {
                            "$ref": "#/definitions/main.tokensResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request(refresh token required)"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    },
                    "403": {
                        "description": "Forbidden(User-Agent changed, or invalid refresh token)"
                    }
                }
            }
        }
    },
    "definitions": {
        "main.authRequestOrResponse": {
            "type": "object",
            "required": [
                "GUID"
            ],
            "properties": {
                "GUID": {
                    "type": "string",
                    "example": "026b1196-05fa-49ec-acad-bb09ad170148"
                }
            }
        },
        "main.refreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "valid refresh token"
                }
            }
        },
        "main.tokensResponse": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string",
                    "example": "new access token"
                },
                "refresh": {
                    "type": "string",
                    "example": "new refresh token"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Access",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Authentication Service API",
	Description:      "REST API для сервиса аутентификации",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
